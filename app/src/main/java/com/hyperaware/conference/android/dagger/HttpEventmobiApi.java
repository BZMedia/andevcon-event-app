/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hyperaware.conference.android.dagger;

import com.hyperaware.conference.android.eventmobi.EventmobiApi;
import com.hyperaware.conference.android.eventmobi.EventmobiConfig;
import com.hyperaware.conference.android.eventmobi.fetcher.fetcher.StreamingFetcher;
import com.hyperaware.conference.android.eventmobi.fetcher.http.HttpGetStreamer;
import com.hyperaware.conference.android.eventmobi.model.AgendaSectionResponse;
import com.hyperaware.conference.android.eventmobi.model.AttendeesSectionResponse;
import com.hyperaware.conference.android.eventmobi.model.CompaniesSectionResponse;
import com.hyperaware.conference.android.eventmobi.model.EventResponse;
import com.hyperaware.conference.android.eventmobi.model.MapsSectionResponse;
import com.hyperaware.conference.android.eventmobi.model.Section;
import com.hyperaware.conference.android.eventmobi.model.SpeakersSectionResponse;
import com.hyperaware.conference.android.eventmobi.parser.gson.GsonParser;
import com.hyperaware.conference.android.eventmobi.parser.gson.GsonSectionResponseParser;
import com.hyperaware.conference.android.mechanics.FetchException;
import com.hyperaware.conference.android.mechanics.Fetcher;
import com.hyperaware.conference.android.mechanics.Streamer;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;

public class HttpEventmobiApi implements EventmobiApi {

    private final EventmobiConfig config;
    // Map of section types to section data generated by
    // InterceptingEventFetcher after the EventResponse fetcher completes.
    private final HashMap<String, Section> sectionsByType = new HashMap<>();

    public HttpEventmobiApi(EventmobiConfig config) {
        this.config = config;
    }

    @Override
    public Fetcher<EventResponse> getEventFetcher() {
        final Streamer streamer = new HttpGetStreamer(config, config.getEventApiUrl() + ".json");
        return new InterceptingEventFetcher(streamer, new GsonParser<>(EventResponse.class));
    }

    @Override
    public Fetcher<AgendaSectionResponse> getAgendaSectionFetcher() {
        final Streamer streamer = new HttpGetStreamer(config, sectionsByType.get("agenda").getUrl() + ".json");
        return new StreamingFetcher<>(streamer, new GsonSectionResponseParser<>(AgendaSectionResponse.class));
    }

    @Override
    public Fetcher<SpeakersSectionResponse> getSpeakersSectionFetcher() {
        final Streamer streamer = new HttpGetStreamer(config, sectionsByType.get("speakers").getUrl() + ".json");
        return new StreamingFetcher<>(streamer, new GsonSectionResponseParser<>(SpeakersSectionResponse.class));
    }

    @Override
    public Fetcher<AttendeesSectionResponse> getAttendeesSectionFetcher() {
        final Streamer streamer = new HttpGetStreamer(config, sectionsByType.get("attendees").getUrl() + ".json");
        return new StreamingFetcher<>(streamer, new GsonSectionResponseParser<>(AttendeesSectionResponse.class));
    }

    @Override
    public Fetcher<MapsSectionResponse> getMapsSectionFetcher() {
        final Streamer streamer = new HttpGetStreamer(config, sectionsByType.get("maps").getUrl() + ".json");
        return new StreamingFetcher<>(streamer, new GsonSectionResponseParser<>(MapsSectionResponse.class));
    }

    @Override
    public Fetcher<CompaniesSectionResponse> getCompaniesSectionFetcher() {
        final Streamer streamer = new HttpGetStreamer(config, sectionsByType.get("companies").getUrl() + ".json");
        return new StreamingFetcher<>(streamer, new GsonSectionResponseParser<>(CompaniesSectionResponse.class));
    }


    /**
     * Special Fetcher that checks to see if the required sections are
     * available in the response before returning it.  It's then able
     * to build a map of section types to fetched section data for
     * fetching those sections later.
     */
    private class InterceptingEventFetcher extends StreamingFetcher<EventResponse> {
        public InterceptingEventFetcher(Streamer streamer, GsonParser<EventResponse> parser) {
            super(streamer, parser);
        }

        @Override
        public EventResponse fetch() throws FetchException {
            final EventResponse response = super.fetch();
            for (final Section section : response.getResponse().getSections()) {
                sectionsByType.put(section.getType(), section);
            }

            final List<String> required =
                Arrays.asList("agenda", "speakers", "companies", "attendees", "maps", "companies");
            for (final String type : required) {
                if (!sectionsByType.containsKey(type)) {
                    throw new FetchException(type + " section type not found in event response");
                }
            }

            return response;
        }
    }

}
